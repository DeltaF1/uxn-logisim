%:halt {
CONST_0_OUT, OPCODE_IN
}

( From https://stackoverflow.com/a/49076303 )
( Assume 8-bit is on the stack )

( Shift A 7 bits to get the sign bit)

( Subtract the sign bit from 0 )

( ALU output now contains the high byte for A )
( We're now ready to creat our 16-bit sign-extended number )
%:sign-extend {
STACK_OUT, ALU_A_IN, ALU_LOW
CONST_7_OUT, ALU_B_IN, ALU_LOW, ALU_SHIFT, ALU_LATCH
CONST_0_OUT, ALU_A_IN, ALU_LOW
ALU_OUT, ALU_LOW, ALU_B_IN,
ALU_SUB, ALU_LATCH
ALU_OUT, ALU_A_IN, ALU_HIGH,
ALU_LOW, STACK_OUT, ALU_A_IN
}

( Fetch )
|BRK
PC_LOW, PC_OUT, RAM_ADDR_IN, RAM_ADDR_LOW
PC_HIGH, PC_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH
RAM_OUT, OPCODE_IN, PC_INC

|LIT2
%:lit2 {
PC_LOW, PC_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, STACK=1
PC_HIGH, PC_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH
RAM_OUT, PC_INC, STACK_IN, STACK=1
PC_LOW, PC_OUT, RAM_ADDR_IN, RAM_ADDR_LOW
PC_HIGH, PC_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH
RAM_OUT, PC_INC, STACK_IN, NEXT
} :lit2

|LITk
PC_LOW, PC_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, STACK=1
PC_HIGH, PC_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH
RAM_OUT, PC_INC, STACK_IN, NEXT

|LIT2k
( Same as LIT2)
:lit2

|INC
STACK_OUT, ALU_A_IN, ALU_LOW,
CONST_1_OUT, ALU_B_IN, ALU_LOW, ALU_ADD, ALU_LATCH
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|INC2
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH,
CONST_0_OUT, ALU_B_IN, ALU_HIGH,
CONST_1_OUT ALU_B_IN, ALU_LOW, ALU_ADD, ALU_LATCH
ALU_OUT, ALU_HIGH, STACK_IN, STACK=1
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|INCk
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=1
CONST_1_OUT, ALU_B_IN, ALU_LOW, ALU_ADD, ALU_LATCH
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|INC2k
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=1
CONST_0_OUT, ALU_B_IN, ALU_HIGH, STACK=1
CONST_1_OUT ALU_B_IN, ALU_LOW, ALU_ADD, ALU_LATCH
ALU_OUT, ALU_HIGH, STACK_IN, STACK=1
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|POP
STACK=-1, NEXT

|POP2
STACK=-1
STACK=-1, NEXT

|POPk
NEXT

|POP2k
NEXT

|DUP
%:dup {
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=1
ALU_A_OUT, STACK_IN, ALU_LOW, NEXT
} :dup

|DUP2
%:dup2 {
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=1
STACK=1
ALU_A_OUT, STACK_IN, ALU_HIGH, STACK=1
ALU_A_OUT, STACK_IN, ALU_LOW, NEXT
} :dup2

|DUPk
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=1
ALU_A_OUT, STACK_IN, ALU_LOW, STACK=1
ALU_A_OUT, STACK_IN, ALU_LOW, NEXT

|DUP2k
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=1
STACK=1
ALU_A_OUT, STACK_IN, ALU_HIGH, STACK=1
ALU_A_OUT, STACK_IN, ALU_LOW, STACK=1
ALU_A_OUT, STACK_IN, ALU_HIGH, STACK=1
ALU_A_OUT, STACK_IN, ALU_LOW, NEXT

|NIP
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_IN, ALU_A_OUT, ALU_LOW, NEXT

|NIP2
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
ALU_A_OUT, STACK_IN, ALU_LOW, STACK=-1
ALU_A_OUT, STACK_IN, ALU_HIGH, STACK=1, NEXT

|NIPk
:dup

|NIP2k
:dup2

|SWP
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW
STACK_IN, ALU_A_OUT, ALU_LOW, STACK=1
STACK_IN, ALU_B_OUT, ALU_LOW, NEXT

|SWP2
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH

STACK_IN, ALU_A_OUT, ALU_HIGH, STACK=1
STACK_IN, ALU_A_OUT, ALU_LOW, STACK=1
STACK_IN, ALU_B_OUT, ALU_HIGH, STACK=1
STACK_IN, ALU_B_OUT, ALU_LOW, NEXT

|SWPk
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=1
STACK=1
STACK_IN, ALU_A_OUT, ALU_LOW, STACK=1
STACK_IN, ALU_B_OUT, ALU_LOW, NEXT

|SWP2k
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, STACK=1
STACK=1
STACK=1
STACK=1

STACK_IN, ALU_A_OUT, ALU_HIGH, STACK=1
STACK_IN, ALU_A_OUT, ALU_LOW, STACK=1
STACK_IN, ALU_B_OUT, ALU_HIGH, STACK=1
STACK_IN, ALU_B_OUT, ALU_LOW, NEXT

|OVR
STACK=-1,
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=1,
STACK=1
STACK_IN, ALU_A_OUT, ALU_LOW, NEXT

|OVR2
STACK=-1
STACK=-1
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=1,
STACK=1
STACK=1
STACK=1
STACK_IN, ALU_A_OUT, ALU_HIGH, STACK=1
STACK_IN, ALU_A_OUT, ALU_LOW, NEXT

|OVRk
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=1
STACK=1
ALU_A_OUT, STACK_IN, ALU_HIGH, STACK=1
ALU_A_OUT, STACK_IN, ALU_LOW, STACK=1
ALU_A_OUT, STACK_IN, ALU_HIGH, NEXT

|OVR2k
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, STACK=1
STACK=1
STACK=1
STACK=1
STACK_IN, ALU_A_OUT, ALU_HIGH, STACK=1
STACK_IN, ALU_A_OUT, ALU_LOW, STACK=1
STACK_IN, ALU_B_OUT, ALU_HIGH, STACK=1
STACK_IN, ALU_B_OUT, ALU_LOW, STACK=1
STACK_IN, ALU_A_OUT, ALU_HIGH, STACK=1
STACK_IN, ALU_A_OUT, ALU_LOW, NEXT

|ROT
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW
STACK_IN, ALU_A_OUT, ALU_HIGH, STACK=1
STACK_IN, ALU_A_OUT, ALU_LOW, STACK=1
STACK_IN, ALU_B_OUT, ALU_LOW, NEXT

|ROT2
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
CONST_0_OUT, ALU_B_IN, ALU_LOW
CONST_0_OUT, ALU_B_IN, ALU_HIGH, ALU_ADD, ALU_LATCH ( A = z, ALU_OUT = z )
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH ( A = y, ALU_OUT = z, B = x )
STACK_IN, ALU_A_OUT, ALU_HIGH, STACK=1
STACK_IN, ALU_A_OUT, ALU_LOW, STACK=1
STACK_IN, ALU_OUT, ALU_HIGH, STACK=1
STACK_IN, ALU_OUT, ALU_LOW, STACK=1
STACK_IN, ALU_B_OUT, ALU_HIGH, STACK=1
STACK_IN, ALU_B_OUT, ALU_LOW, NEXT

|ROTk
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=1
STACK=1
STACK=1
STACK_IN, ALU_A_OUT, ALU_HIGH, STACK=1
STACK_IN, ALU_A_OUT, ALU_LOW, STACK=1
STACK_IN, ALU_B_OUT, ALU_LOW, NEXT

|ROT2k
( I think this is impossible to do in 16 instructions ;_; )
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
CONST_0_OUT, ALU_B_IN, ALU_LOW, STACK=-1
CONST_0_OUT, ALU_B_IN, ALU_HIGH, ALU_ADD, ALU_LATCH, STACK=-1 ( A = z, ALU_OUT = z )
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, STACK=1
STACK=1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=1
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=1 ( A = y, ALU_OUT = z, B = x )
STACK=1
STACK=1
STACK_IN, ALU_A_OUT, ALU_HIGH, STACK=1
STACK_IN, ALU_A_OUT, ALU_LOW, STACK=1
STACK_IN, ALU_OUT, ALU_HIGH, STACK=1
STACK_IN, ALU_OUT, ALU_LOW, STACK=1
STACK_IN, ALU_B_OUT, ALU_HIGH, STACK=1
STACK_IN, ALU_B_OUT, ALU_LOW, NEXT

( Control Flow )
|EQU
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, ALU_SUB, ALU_LATCH
CONST_1_OUT, STACK_IN
RESET_IF_ZERO
CONST_0_OUT, STACK_IN, NEXT

|EQU2
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, ALU_SUB, ALU_LATCH
CONST_1_OUT, STACK_IN
RESET_IF_ZERO
CONST_0_OUT, STACK_IN, NEXT

|EQUk
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, ALU_SUB, ALU_LATCH, STACK=1
STACK=1
CONST_1_OUT, STACK_IN
RESET_IF_ZERO
CONST_0_OUT, STACK_IN, NEXT

|EQU2k
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, ALU_SUB, ALU_LATCH, STACK=1
STACK=1
STACK=1
STACK=1
CONST_1_OUT, STACK_IN
RESET_IF_ZERO
CONST_0_OUT, STACK_IN, NEXT

|NEQ
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, ALU_SUB, ALU_LATCH
CONST_0_OUT, STACK_IN
RESET_IF_ZERO
CONST_1_OUT, STACK_IN, NEXT

|NEQ2
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, ALU_SUB, ALU_LATCH
CONST_0_OUT, STACK_IN
RESET_IF_ZERO
CONST_1_OUT, STACK_IN, NEXT

|NEQk
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, ALU_SUB, ALU_LATCH, STACK=1
STACK=1
CONST_0_OUT, STACK_IN
RESET_IF_ZERO
CONST_1_OUT, STACK_IN, NEXT

|NEQ2k
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, ALU_SUB, ALU_LATCH, STACK=1
STACK=1
STACK=1
STACK=1
CONST_0_OUT, STACK_IN
RESET_IF_ZERO
CONST_1_OUT, STACK_IN, NEXT

|GTH
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, ALU_SUB, ALU_LATCH
CONST_1_OUT, STACK_IN
RESET_IF_CARRY
CONST_0_OUT, STACK_IN, NEXT

|GTH2
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, ALU_SUB, ALU_LATCH
CONST_1_OUT, STACK_IN
RESET_IF_CARRY
CONST_0_OUT, STACK_IN, NEXT

|GTHk
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, ALU_SUB, ALU_LATCH, STACK=1
STACK=1
CONST_1_OUT, STACK_IN
RESET_IF_CARRY
CONST_0_OUT, STACK_IN, NEXT

|GTH2k
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, ALU_SUB, ALU_LATCH, STACK=1
STACK=1
STACK=1
STACK=1
CONST_1_OUT, STACK_IN
RESET_IF_CARRY
CONST_0_OUT, STACK_IN, NEXT



|LTH
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_LOW, ALU_SUB, ALU_LATCH
CONST_1_OUT, STACK_IN
RESET_IF_CARRY
CONST_0_OUT, STACK_IN, NEXT

|LTH2
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, ALU_SUB, ALU_LATCH
CONST_1_OUT, STACK_IN
RESET_IF_CARRY
CONST_0_OUT, STACK_IN, NEXT

|LTHk
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_LOW, ALU_SUB, ALU_LATCH, STACK=1
STACK=1
CONST_1_OUT, STACK_IN
RESET_IF_CARRY
CONST_0_OUT, STACK_IN, NEXT

|LTH2k
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, ALU_SUB, ALU_LATCH, STACK=1
STACK=1
STACK=1
STACK=1
CONST_1_OUT, STACK_IN
RESET_IF_CARRY
CONST_0_OUT, STACK_IN, NEXT

|JMP
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH
:sign-extend
PC_OUT, PC_HIGH, ALU_B_IN, ALU_HIGH, STACK=-1
PC_OUT, PC_LOW, ALU_B_IN, ALU_LOW, ALU_ADD, ALU_LATCH
ALU_OUT, ALU_LOW, PC_IN, PC_LOW
ALU_OUT, ALU_HIGH, PC_IN, PC_HIGH, NEXT

|JMP2
STACK_OUT, PC_IN, PC_LOW, STACK=-1
STACK_OUT, PC_IN, PC_HIGH, STACK=-1
NEXT

|JMPk
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH
:sign-extend
PC_OUT, PC_HIGH, ALU_B_IN, ALU_HIGH
PC_OUT, PC_LOW, ALU_B_IN, ALU_LOW, ALU_ADD, ALU_LATCH
ALU_OUT, ALU_LOW, PC_IN, PC_LOW
ALU_OUT, ALU_HIGH, PC_IN, PC_HIGH, NEXT

|JMP2k
STACK_OUT, PC_IN, PC_LOW, STACK=-1
STACK_OUT, PC_IN, PC_HIGH, STACK=1
STACK=1, NEXT


( A >> 7 )
( 0 - A >> 7 )
|JCN
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=1
CONST_0_OUT, ALU_B_IN, ALU_LOW, ALU_SUB, ALU_LATCH
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1 ( A = jump offset )
STACK=-1, RESET_IF_ZERO
CONST_7_OUT, ALU_B_IN, ALU_LOW, ALU_SHIFT, ALU_LATCH, STACK=1
CONST_0_OUT, ALU_A_IN, ALU_LOW, STACK=1
ALU_OUT, ALU_LOW, ALU_B_IN,
ALU_SUB, ALU_LATCH
ALU_OUT, ALU_A_IN, ALU_HIGH,
ALU_LOW, STACK_OUT, ALU_A_IN, STACK=-1
( A = sign-extended jump offset )
PC_OUT, PC_LOW, ALU_B_IN, ALU_LOW, STACK=-1
PC_OUT, PC_HIGH, ALU_B_IN, ALU_HIGH, ALU_ADD, ALU_LATCH
ALU_OUT, ALU_LOW, PC_IN, PC_LOW
ALU_OUT, ALU_HIGH, PC_IN, PC_HIGH, NEXT

|JCN2
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
CONST_1_OUT, ALU_B_IN, ALU_LATCH, ALU_LOW, ALU_SUB, STACK=-1
STACK=-1
RESET_IF_ZERO
STACK=1
STACK_OUT, PC_IN, PC_HIGH, STACK=1
STACK_OUT, PC_IN, PC_LOW, STACK=-1
STACK=-1, NEXT

|JCNk
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=1
CONST_0_OUT, ALU_B_IN, ALU_LOW, ALU_SUB, ALU_LATCH
STACK_OUT, ALU_A_IN, ALU_LOW, RESET_IF_ZERO ( A = jump offset ) 
CONST_7_OUT, ALU_B_IN, ALU_LOW, ALU_SHIFT, ALU_LATCH
CONST_0_OUT, ALU_A_IN, ALU_LOW
ALU_OUT, ALU_LOW, ALU_B_IN
ALU_SUB, ALU_LATCH
ALU_OUT, ALU_A_IN, ALU_HIGH
ALU_LOW, STACK_OUT, ALU_A_IN
( A = sign-extended jump offset )
PC_OUT, PC_LOW, ALU_B_IN, ALU_LOW
PC_OUT, PC_HIGH, ALU_B_IN, ALU_HIGH, ALU_ADD, ALU_LATCH
ALU_OUT, ALU_LOW, PC_IN, PC_LOW
ALU_OUT, ALU_HIGH, PC_IN, PC_HIGH, NEXT

|JCN2k
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
CONST_1_OUT, ALU_B_IN, ALU_LATCH, ALU_LOW, ALU_SUB, STACK=1
RESET_IF_ZERO
STACK=-1
STACK_OUT, PC_IN, PC_LOW, STACK=-1
STACK_OUT, PC_IN, PC_HIGH, STACK=1
STACK=1, NEXT

|JSR
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH
:sign-extend
STACK=-1 ( TODO inline sign-extend to add this to the end )
STACK_SWAP, STACK=1
PC_OUT, PC_HIGH, ALU_B_IN, ALU_HIGH, STACK_IN, STACK_SWAP, STACK=1
PC_OUT, PC_LOW, ALU_B_IN, ALU_LOW, ALU_ADD, ALU_LATCH, STACK_SWAP, STACK_IN
ALU_OUT, ALU_HIGH, PC_IN, PC_HIGH, 
ALU_OUT, ALU_LOW, PC_IN, PC_LOW, NEXT

|JSR2
STACK_SWAP, STACK=1
STACK_SWAP, STACK_IN, PC_OUT, PC_HIGH, STACK=1
STACK_SWAP, STACK_IN, PC_OUT, PC_LOW
STACK_OUT, PC_IN, PC_LOW, STACK=-1
STACK_OUT, PC_IN, PC_HIGH, STACK=-1, NEXT

|JSRk
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH
:sign-extend
STACK_SWAP, STACK=1
PC_OUT, PC_HIGH, ALU_B_IN, ALU_HIGH, STACK_IN, STACK_SWAP, STACK=1
PC_OUT, PC_LOW, ALU_B_IN, ALU_LOW, ALU_ADD, ALU_LATCH, STACK_SWAP, STACK_IN, STACK=1
ALU_OUT, ALU_HIGH, PC_IN, PC_HIGH, 
ALU_OUT, ALU_LOW, PC_IN, PC_LOW, NEXT

|JSR2k
STACK_OUT, PC_IN, PC_LOW, STACK=-1
STACK_OUT, PC_IN, PC_HIGH, STACK=1
STACK_SWAP, STACK=1
STACK_SWAP, STACK_IN, PC_OUT, PC_HIGH, STACK=1
STACK_SWAP, STACK_IN, PC_OUT, PC_LOW, NEXT

|STH
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK=1, STACK_SWAP
STACK_IN, ALU_A_OUT, ALU_LOW, STACK_SWAP, NEXT

|STH2
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK=1, STACK_SWAP
STACK_IN, ALU_A_OUT, ALU_LOW, STACK=1, STACK_SWAP
STACK_IN, ALU_A_OUT, ALU_HIGH, STACK_SWAP, NEXT

|STHk
STACK_OUT, ALU_A_IN, ALU_LOW
STACK=1, STACK_SWAP
STACK_IN, ALU_A_OUT, ALU_LOW, STACK_SWAP, NEXT

|STH2k
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=1
STACK=1, STACK_SWAP
STACK_IN, ALU_A_OUT, ALU_LOW, STACK=1, STACK_SWAP
STACK_IN, ALU_A_OUT, ALU_HIGH, STACK_SWAP, NEXT

( Memory opcodes )
( A = addr, RAM_ADDR=addr, B.h = 0, stack points to first byte )
%:load2 {
RAM_OUT, STACK_IN, STACK=1
CONST_1_OUT, ALU_B_IN, ALU_LOW, ALU_ADD, ALU_LATCH
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, ALU_LOW
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH, ALU_HIGH
RAM_OUT, STACK_IN
}

|LDZ
CONST_0_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH
STACK_OUT, RAM_ADDR_IN, RAM_ADDR_LOW
RAM_OUT, STACK_IN, NEXT

|LDZ2
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH, RAM_ADDR_IN, RAM_ADDR_HIGH
STACK_OUT, ALU_A_IN, ALU_LOW, RAM_ADDR_IN, RAM_ADDR_LOW
:load2
NEXT

|LDZk
CONST_0_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH
STACK_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, STACK=1
RAM_OUT, STACK_IN, NEXT

|LDZ2k
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH, RAM_ADDR_IN, RAM_ADDR_HIGH
STACK_OUT, ALU_A_IN, ALU_LOW, RAM_ADDR_IN, RAM_ADDR_LOW, STACK=1
:load2
NEXT

|STZ
CONST_0_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH
STACK_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, STACK=-1
STACK_OUT, RAM_IN, STACK=-1, NEXT

|STZ2 ( data* addr^ -- )
STACK_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, ALU_A_IN, ALU_LOW, STACK=-1
CONST_0_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH, ALU_A_IN, ALU_B_IN, ALU_HIGH, STACK=-1
STACK_OUT, RAM_IN, STACK=1
CONST_1_OUT, ALU_B_IN, ALU_LOW, ALU_ADD, ALU_LATCH
ALU_OUT, ALU_LOW, RAM_ADDR_IN, RAM_ADDR_LOW
ALU_OUT, ALU_HIGH, RAM_ADDR_IN, RAM_ADDR_HIGH
STACK_OUT, RAM_IN, STACK=-1
STACK=-1, NEXT

|STZk
CONST_0_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH
STACK_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, STACK=-1
STACK_OUT, RAM_IN, STACK=1, NEXT

|STZ2k
STACK_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, ALU_A_IN, ALU_LOW, STACK=-1
CONST_0_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH, ALU_A_IN, ALU_B_IN, ALU_HIGH, STACK=-1
STACK_OUT, RAM_IN, STACK=1
CONST_1_OUT, ALU_B_IN, ALU_LOW, ALU_ADD, ALU_LATCH
ALU_OUT, ALU_LOW, RAM_ADDR_IN, RAM_ADDR_LOW
ALU_OUT, ALU_HIGH, RAM_ADDR_IN, RAM_ADDR_HIGH
STACK_OUT, RAM_IN, STACK=1, NEXT


|LDR
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH

STACK_OUT, ALU_A_IN, ALU_LOW
CONST_7_OUT, ALU_B_IN, ALU_LOW, ALU_SHIFT, ALU_LATCH
CONST_0_OUT, ALU_A_IN, ALU_LOW
ALU_OUT, ALU_LOW, ALU_B_IN,
ALU_SUB, ALU_LATCH
ALU_OUT, ALU_A_IN, ALU_HIGH,
ALU_LOW, STACK_OUT, ALU_A_IN,
PC_OUT, ALU_B_IN, PC_LOW, ALU_LOW
PC_OUT, ALU_B_IN, PC_HIGH, ALU_HIGH, ALU_ADD, ALU_LATCH
( ALU_OUT = addr of byte to load )
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, ALU_LOW, ALU_B_IN
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH, ALU_HIGH, ALU_B_IN
RAM_OUT, STACK_IN, NEXT


|LDR2
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH

STACK_OUT, ALU_A_IN, ALU_LOW
CONST_7_OUT, ALU_B_IN, ALU_LOW, ALU_SHIFT, ALU_LATCH
CONST_0_OUT, ALU_A_IN, ALU_LOW
ALU_OUT, ALU_LOW, ALU_B_IN,
ALU_SUB, ALU_LATCH
ALU_OUT, ALU_A_IN, ALU_HIGH,
ALU_LOW, STACK_OUT, ALU_A_IN,
PC_OUT, ALU_B_IN, PC_LOW, ALU_LOW
PC_OUT, ALU_B_IN, PC_HIGH, ALU_HIGH, ALU_ADD, ALU_LATCH
( ALU_OUT = addr of byte to load )
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, ALU_LOW, ALU_A_IN
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH, ALU_HIGH, ALU_A_IN
RAM_OUT, STACK_IN, STACK=1

CONST_0_OUT, ALU_B_IN, ALU_HIGH
CONST_1_OUT, ALU_B_IN, ALU_LOW, ALU_ADD, ALU_LATCH

ALU_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, ALU_LOW
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH, ALU_HIGH

RAM_OUT, STACK_IN, NEXT

|LDRk
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH

STACK_OUT, ALU_A_IN, ALU_LOW
CONST_7_OUT, ALU_B_IN, ALU_LOW, ALU_SHIFT, ALU_LATCH
CONST_0_OUT, ALU_A_IN, ALU_LOW
ALU_OUT, ALU_LOW, ALU_B_IN,
ALU_SUB, ALU_LATCH
ALU_OUT, ALU_A_IN, ALU_HIGH,
ALU_LOW, STACK_OUT, ALU_A_IN,
PC_OUT, ALU_B_IN, PC_LOW, ALU_LOW
PC_OUT, ALU_B_IN, PC_HIGH, ALU_HIGH, ALU_ADD, ALU_LATCH
( ALU_OUT = addr of byte to load )
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, ALU_LOW
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH, ALU_HIGH, STACK=1 
RAM_OUT, STACK_IN, NEXT

|LDR2k
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH

STACK_OUT, ALU_A_IN, ALU_LOW
CONST_7_OUT, ALU_B_IN, ALU_LOW, ALU_SHIFT, ALU_LATCH
CONST_0_OUT, ALU_A_IN, ALU_LOW
ALU_OUT, ALU_LOW, ALU_B_IN,
ALU_SUB, ALU_LATCH
ALU_OUT, ALU_A_IN, ALU_HIGH,
ALU_LOW, STACK_OUT, ALU_A_IN,
PC_OUT, ALU_B_IN, PC_LOW, ALU_LOW
PC_OUT, ALU_B_IN, PC_HIGH, ALU_HIGH, ALU_ADD, ALU_LATCH
( ALU_OUT = addr of byte to load )
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, ALU_LOW, ALU_B_IN
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH, ALU_HIGH, ALU_B_IN, STACK=1
RAM_OUT, STACK_IN, STACK=1

CONST_0_OUT, ALU_B_IN, ALU_HIGH
CONST_1_OUT, ALU_B_IN, ALU_HIGH, ALU_ADD, ALU_LATCH

ALU_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, ALU_LOW
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH, ALU_HIGH

RAM_OUT, STACK_IN, NEXT

|STR
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH

STACK_OUT, ALU_A_IN, ALU_LOW
CONST_7_OUT, ALU_B_IN, ALU_LOW, ALU_SHIFT, ALU_LATCH
CONST_0_OUT, ALU_A_IN, ALU_LOW
ALU_OUT, ALU_LOW, ALU_B_IN,
ALU_SUB, ALU_LATCH
ALU_OUT, ALU_A_IN, ALU_HIGH,
ALU_LOW, STACK_OUT, ALU_A_IN,
PC_OUT, ALU_B_IN, PC_LOW, ALU_LOW
PC_OUT, ALU_B_IN, PC_HIGH, ALU_HIGH, ALU_ADD, ALU_LATCH
( ALU_OUT = addr of byte to load )
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, ALU_LOW, ALU_B_IN
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH, ALU_HIGH, ALU_B_IN, STACK=-1
RAM_IN, STACK_OUT, STACK=-1, NEXT

|STR2 ( data* off^ -- )
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH

STACK_OUT, ALU_A_IN, ALU_LOW
CONST_7_OUT, ALU_B_IN, ALU_LOW, ALU_SHIFT, ALU_LATCH
CONST_0_OUT, ALU_A_IN, ALU_LOW
ALU_OUT, ALU_LOW, ALU_B_IN,
ALU_SUB, ALU_LATCH
ALU_OUT, ALU_A_IN, ALU_HIGH,
ALU_LOW, STACK_OUT, ALU_A_IN ( A = sign-extended offset )

PC_OUT, PC_HIGH, ALU_B_IN, ALU_HIGH, STACK=-1
PC_OUT, PC_LOW, ALU_B_IN, ALU_LOW, ALU_ADD, ALU_LATCH, STACK=-1
ALU_OUT, RAM_ADDR_IN, ALU_LOW, RAM_ADDR_LOW, ALU_A_IN
ALU_OUT, RAM_ADDR_IN, ALU_HIGH, RAM_ADDR_HIGH, ALU_A_IN
RAM_IN, STACK_OUT, STACK=1
CONST_0_OUT, ALU_B_IN, ALU_HIGH
CONST_1_OUT, ALU_B_IN, ALU_LOW, ALU_ADD, ALU_LATCH
ALU_OUT, RAM_ADDR_IN, ALU_LOW, RAM_ADDR_LOW
ALU_OUT, RAM_ADDR_IN, ALU_HIGH, RAM_ADDR_HIGH
RAM_IN, STACK_OUT, STACK=-1
STACK=-1, NEXT

|STRk
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH

STACK_OUT, ALU_A_IN, ALU_LOW
CONST_7_OUT, ALU_B_IN, ALU_LOW, ALU_SHIFT, ALU_LATCH
CONST_0_OUT, ALU_A_IN, ALU_LOW
ALU_OUT, ALU_LOW, ALU_B_IN,
ALU_SUB, ALU_LATCH
ALU_OUT, ALU_A_IN, ALU_HIGH,
ALU_LOW, STACK_OUT, ALU_A_IN,
PC_OUT, ALU_B_IN, PC_LOW, ALU_LOW
PC_OUT, ALU_B_IN, PC_HIGH, ALU_HIGH, ALU_ADD, ALU_LATCH
( ALU_OUT = addr of byte to load )
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, ALU_LOW, ALU_B_IN
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH, ALU_HIGH, ALU_B_IN, STACK=-1
RAM_IN, STACK_OUT, STACK=1, NEXT

|STR2k
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH

STACK_OUT, ALU_A_IN, ALU_LOW
CONST_7_OUT, ALU_B_IN, ALU_LOW, ALU_SHIFT, ALU_LATCH
CONST_0_OUT, ALU_A_IN, ALU_LOW
ALU_OUT, ALU_LOW, ALU_B_IN,
ALU_SUB, ALU_LATCH
ALU_OUT, ALU_A_IN, ALU_HIGH,
ALU_LOW, STACK_OUT, ALU_A_IN

PC_OUT, PC_HIGH, ALU_B_IN, ALU_HIGH, STACK=-1
PC_OUT, PC_LOW, ALU_B_IN, ALU_LOW, ALU_ADD, ALU_LATCH, STACK=-1
ALU_OUT, RAM_ADDR_IN, ALU_LOW, RAM_ADDR_LOW, ALU_A_IN
ALU_OUT, RAM_ADDR_IN, ALU_HIGH, RAM_ADDR_HIGH, ALU_A_IN
RAM_IN, STACK_OUT, STACK=1
CONST_0_OUT, ALU_B_IN, ALU_HIGH
CONST_1_OUT, ALU_B_IN, ALU_LOW, ALU_ADD, ALU_LATCH
ALU_OUT, RAM_ADDR_IN, ALU_LOW, RAM_ADDR_LOW
ALU_OUT, RAM_ADDR_IN, ALU_HIGH, RAM_ADDR_HIGH
RAM_IN, STACK_OUT, STACK=1, NEXT

|LDA
STACK_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, STACK=-1
STACK_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH
RAM_OUT, STACK_IN, NEXT

|LDA2
STACK_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH, ALU_A_IN, ALU_HIGH
RAM_OUT, STACK_IN, STACK=1
CONST_1_OUT, ALU_B_IN, ALU_LOW,
CONST_0_OUT, ALU_B_IN, ALU_HIGH, ALU_ADD, ALU_LATCH
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, ALU_LOW
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH, ALU_HIGH
RAM_OUT, STACK_IN, NEXT

|LDAk
STACK_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, STACK=-1
STACK_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH, STACK=1
STACK=1
RAM_OUT, STACK_IN, NEXT

|LDA2k
STACK_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH, ALU_A_IN, ALU_HIGH, STACK=1
CONST_1_OUT, ALU_B_IN, ALU_LOW, STACK=1
CONST_0_OUT, ALU_B_IN, ALU_HIGH, ALU_ADD, ALU_LATCH
RAM_OUT, STACK_IN, STACK=1
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, ALU_LOW
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH, ALU_HIGH
RAM_OUT, STACK_IN, NEXT

|STA
STACK_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH, ALU_A_IN, ALU_HIGH, STACK=-1
RAM_IN, STACK_OUT, STACK=-1, NEXT

|STA2 ( data* addr* -- )
STACK_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH, ALU_A_IN, ALU_HIGH, STACK=-1
CONST_1_OUT, ALU_B_IN, ALU_LOW, STACK=-1
RAM_IN, STACK_OUT, STACK=1
CONST_0_OUT, ALU_B_IN, ALU_HIGH, ALU_ADD, ALU_LATCH
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, ALU_LOW
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH, ALU_HIGH
RAM_IN, STACK_OUT, STACK=-1,
STACK=-1, NEXT

|STAk
STACK_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH, ALU_A_IN, ALU_HIGH, STACK=-1
RAM_IN, STACK_OUT, STACK=1,
STACK=1, NEXT

|STA2k
STACK_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH, ALU_A_IN, ALU_HIGH, STACK=-1
CONST_1_OUT, ALU_B_IN, ALU_LOW, STACK=-1
RAM_IN, STACK_OUT, STACK=1
CONST_0_OUT, ALU_B_IN, ALU_HIGH, ALU_ADD, ALU_LATCH
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_LOW, ALU_LOW
ALU_OUT, RAM_ADDR_IN, RAM_ADDR_HIGH, ALU_HIGH
RAM_IN, STACK_OUT, STACK=1
STACK=1, NEXT

|DEI
( STACK_OUT, DEVICE_ADDR_IN )
( STACK_IN, DEVICE_OUT, NEXT )
( TODO )

|DEO
( TODO )
STACK_OUT, DEVICE_ADDR_IN, STACK=-1
STACK_OUT, DEVICE_IN, STACK=-1, NEXT

( Arithmetic )

|ADD
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, ALU_ADD, ALU_LATCH
ALU_LOW, ALU_OUT, STACK_IN, NEXT

|ADD2
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, ALU_ADD, ALU_LATCH
ALU_OUT, ALU_HIGH, STACK_IN, STACK=1
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|ADDk
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=1
ALU_ADD, ALU_LOW, ALU_LATCH, STACK=1
ALU_OUT, STACK_IN, NEXT

|ADD2k
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, ALU_ADD, ALU_LATCH, STACK=1
STACK=1
STACK=1
STACK=1
ALU_OUT, ALU_HIGH, STACK_IN, STACK=1
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|SUB
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_LOW, ALU_SUB, ALU_LATCH
ALU_LOW, ALU_OUT, STACK_IN, NEXT

|SUB2
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, ALU_SUB, ALU_LATCH
ALU_OUT, ALU_HIGH, STACK_IN, STACK=1
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|SUBk
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=1
ALU_SUB, ALU_LOW, ALU_LATCH, STACK=1
ALU_OUT, STACK_IN, NEXT

|SUB2k
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, ALU_SUB, ALU_LATCH, STACK=1
STACK=1
STACK=1
STACK=1
ALU_OUT, ALU_HIGH, STACK_IN, STACK=1
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|MUL
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, ALU_MUL, ALU_LATCH,
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|MUL2
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, ALU_MUL, ALU_LATCH
ALU_OUT, ALU_HIGH, STACK_IN, STACK=1
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|MULk
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=1
ALU_MUL, ALU_LOW, ALU_LATCH, STACK=1
ALU_OUT, STACK_IN, NEXT

|MUL2k
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, ALU_MUL, ALU_LATCH, STACK=1
STACK=1
STACK=1
STACK=1
ALU_OUT, ALU_HIGH, STACK_IN, STACK=1
ALU_OUT, ALU_LOW, STACK_IN, NEXT

( TODO: Div will NOP for several cycles to let the hardware divider work )
|DIV
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_LOW, ALU_DIV, ALU_LATCH,
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|DIV2
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, ALU_DIV, ALU_LATCH
ALU_OUT, ALU_HIGH, STACK_IN, STACK=1
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|DIVk
CONST_0_OUT, ALU_A_IN, ALU_B_IN, ALU_HIGH
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=1
ALU_DIV, ALU_LOW, ALU_LATCH, STACK=1
ALU_OUT, STACK_IN, NEXT

|DIV2k
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, ALU_DIV, ALU_LATCH, STACK=1
STACK=1
STACK=1
STACK=1
ALU_OUT, ALU_HIGH, STACK_IN, STACK=1
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|AND
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, ALU_AND, ALU_LATCH,
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|AND2
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, ALU_AND, ALU_LATCH
ALU_OUT, ALU_HIGH, STACK_IN, STACK=1
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|ANDk
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=1
ALU_AND, ALU_LOW, ALU_LATCH, STACK=1
ALU_OUT, STACK_IN, NEXT

|AND2k
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, ALU_AND, ALU_LATCH, STACK=1
STACK=1
STACK=1
STACK=1
ALU_OUT, ALU_HIGH, STACK_IN, STACK=1
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|ORA
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, ALU_OR, ALU_LATCH,
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|ORA2
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, ALU_OR, ALU_LATCH
ALU_OUT, ALU_HIGH, STACK_IN, STACK=1
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|ORAk
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=1
ALU_OR, ALU_LOW, ALU_LATCH, STACK=1
ALU_OUT, STACK_IN, NEXT

|ORA2k
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, ALU_OR, ALU_LATCH, STACK=1
STACK=1
STACK=1
STACK=1
ALU_OUT, ALU_HIGH, STACK_IN, STACK=1
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|EOR
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, ALU_XOR, ALU_LATCH,
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|EOR2
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, ALU_XOR, ALU_LATCH
ALU_OUT, ALU_HIGH, STACK_IN, STACK=1
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|EORk
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=1
ALU_XOR, ALU_LOW, ALU_LATCH, STACK=1
ALU_OUT, STACK_IN, NEXT

|EOR2k
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, STACK=-1
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_B_IN, ALU_HIGH, ALU_XOR, ALU_LATCH, STACK=1
STACK=1
STACK=1
STACK=1
ALU_OUT, ALU_HIGH, STACK_IN, STACK=1
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|SFT
CONST_0_OUT, ALU_A_IN, ALU_HIGH
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_LOW, ALU_SHIFT, ALU_LATCH
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|SFT2
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, ALU_SHIFT, ALU_LATCH
ALU_OUT, ALU_HIGH, STACK_IN, STACK=1
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|SFTk
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=1
CONST_0_OUT, ALU_A_IN, ALU_HIGH, ALU_SHIFT, ALU_LATCH, STACK=1
ALU_OUT, ALU_LOW, STACK_IN, NEXT

|SFT2k
STACK_OUT, ALU_B_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_LOW, STACK=-1
STACK_OUT, ALU_A_IN, ALU_HIGH, ALU_SHIFT, ALU_LATCH, STACK=1
STACK=1
STACK=1
ALU_OUT, ALU_HIGH, STACK_IN, STACK=1
ALU_OUT, ALU_LOW, STACK_IN, NEXT
